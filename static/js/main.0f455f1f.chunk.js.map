{"version":3,"sources":["components/InputAddTodo.js","components/TodoItem.js","components/TodoList.js","Loader.js","Modal/Modal.js","App.js","reportWebVitals.js","index.js"],"names":["InputAddTodo","onCreate","input","defaultValue","useState","value","setValue","inputObjectFromUseInputValue","onChange","event","target","clear","useInputValue","className","onSubmit","preventDefault","trim","type","placeholder","TodoItem","todo","index","onRemove","completed","id","checked","title","onClick","TodoList","props","todos","map","onToggle","Preloader","Modal","state","isOpen","Fragment","setState","this","React","Component","App","setTodos","loading","setLoading","useEffect","fetch","then","response","json","text","oldId","length","filter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAoCeA,MArBf,YAAqC,IAAbC,EAAY,EAAZA,SAChBC,EAbR,WAA2C,IAApBC,EAAmB,uDAAJ,GAAI,EACdC,mBAASD,GADK,mBACjCE,EADiC,KAC1BC,EAD0B,KAExC,MAAO,CACLC,6BAA8B,CAC5BF,MAAOA,EACPG,SAAU,SAACC,GAAD,OAAWH,EAASG,EAAMC,OAAOL,SAE7CM,MAAO,kBAAML,EAAS,KACtBD,MAAO,kBAAMA,IAKDO,CAAc,IAU5B,OACE,uBAAMC,UAAU,OAAOC,SATzB,SAAuBL,GACrBA,EAAMM,iBACFb,EAAMG,QAAQW,SAChBf,EAASC,EAAMG,SACfH,EAAMS,UAKR,UACE,mCAAOM,KAAK,OAAOC,YAAY,kBAAqBhB,EAAMK,+BAC1D,wBAAQU,KAAK,SAAb,0BCDSE,MAzBf,YAAuD,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,MAAOb,EAAqB,EAArBA,SAASc,EAAY,EAAZA,SACxC,OAEM,qBAAIT,UAAU,WAAd,UACA,uBAAMA,UAAWO,EAAKG,UAAY,OAAS,GAA3C,UACE,uBACEN,KAAK,WACLT,SAAU,kBAAMA,EAASY,EAAKI,KAC9BC,QAASL,EAAKG,YAEhB,mCAAWF,IANb,OAOGD,EAAKM,SAER,wBAAQC,QAAS,WAAKL,EAASF,EAAKI,KAApC,sBCGOI,MAff,SAAkBC,GAChB,OACE,oBAAIhB,UAAU,YAAd,SACGgB,EAAMC,MAAMC,KAAI,SAACX,EAAMC,GAAP,OACf,cAAC,EAAD,CAAwBD,KAAMA,EAAMC,MAAOA,EAAOb,SAAUqB,EAAMG,SAAUV,SAAUO,EAAMP,UAA7EF,EAAKI,UCWbS,MAjBf,SAAmBJ,GACjB,OACG,qBAAKhB,UAAU,YAAf,SACD,sBAAKA,UAAU,aAAf,UACE,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,8B,6BCVeqB,G,kNACnBC,MAAQ,CACNC,QAAQ,G,uDAGA,IAAD,OACP,OACE,eAAC,IAAMC,SAAP,WACE,wBAAQxB,UAAU,eAChBc,QAAS,WACP,EAAKW,SAAS,CAAEF,QAAQ,KAF5B,wBAOCG,KAAKJ,MAAMC,QACV,qBAAKvB,UAAU,QAAf,SACE,sBAAKA,UAAU,YAAf,UACE,sDACA,wBACEc,QAAS,WACP,EAAKW,SAAS,CAAEF,QAAQ,KAF5B,qC,GAnBqBI,IAAMC,YCmD1BC,MAhDf,WAAgB,IAAD,EACatC,mBAAS,IADtB,mBACN0B,EADM,KACCa,EADD,OAEiBvC,oBAAS,GAF1B,mBAENwC,EAFM,KAEGC,EAFH,KAiCb,OA7BAC,qBAAU,WACRC,MAAM,uDACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAClB,GACLa,EAASb,GACTe,GAAW,QAEd,IAuBD,sBAAKhC,UAAU,UAAf,UACE,gDACA,cAAC,EAAD,IACA,cAAC,EAAD,CAAcZ,SATlB,SAAiBkD,GACf,IAAMC,EAAQtB,EAAMA,EAAMuB,OAAS,GAAG7B,GACtCmB,EAAS,GAAD,mBAAKb,GAAL,CAAY,CAAEN,GAAI4B,EAAQ,EAAG7B,WAAW,EAAOG,MAAOyB,SAQ3DP,GAAW,cAAC,EAAD,IACXd,EAAMuB,OAAS,EACd,cAAC,EAAD,CAAUvB,MAAOA,EAAOE,SA3B9B,SAAoBR,GAClBmB,EACEb,EAAMC,KAAI,SAACX,GAIT,OAHIA,EAAKI,KAAOA,IACdJ,EAAKG,WAAaH,EAAKG,WAElBH,OAqBuCE,SAhBpD,SAAoBE,GAClBmB,EAASb,EAAMwB,QAAO,SAAClC,GAAD,OAAUA,EAAKI,KAAOA,SAgBtCoB,EAAU,KACZ,gDCpCOW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0f455f1f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction useInputValue(defaultValue = \"\") {\r\n  const [value, setValue] = useState(defaultValue);\r\n  return {\r\n    inputObjectFromUseInputValue: {\r\n      value: value,\r\n      onChange: (event) => setValue(event.target.value),\r\n    },\r\n    clear: () => setValue(\"\"),\r\n    value: () => value,\r\n  };\r\n}\r\n\r\nfunction InputAddTodo({ onCreate }) {\r\n  const input = useInputValue(\"\");\r\n\r\n  function submitHandler(event) {\r\n    event.preventDefault();\r\n    if (input.value().trim()) {\r\n      onCreate(input.value());\r\n      input.clear();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form className=\"form\" onSubmit={submitHandler}>\r\n      <input type=\"text\" placeholder=\"Enter new todo\" {...input.inputObjectFromUseInputValue} />\r\n      <button type=\"submit\">Add todo</button>\r\n    </form>\r\n  );\r\n}\r\nInputAddTodo.propTypes = {\r\n  onCreate: PropTypes.func.isRequired,\r\n};\r\nexport default InputAddTodo;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction TodoItem({ todo, index, onChange,onRemove }) {\r\n  return (\r\n    \r\n        <li className=\"listItem\">\r\n        <span className={todo.completed ? \"done\" : \"\"}>\r\n          <input\r\n            type=\"checkbox\"\r\n            onChange={() => onChange(todo.id)}\r\n            checked={todo.completed}\r\n          />\r\n          <strong>{++index}</strong>&nbsp;\r\n          {todo.title}\r\n        </span>\r\n        <button onClick={()=>{onRemove(todo.id)}}>&times;</button>\r\n      </li>\r\n      \r\n  );\r\n}\r\n\r\nTodoItem.propTypes = {\r\n  todo: PropTypes.object.isRequired,\r\n  index: PropTypes.number,\r\n  onChange: PropTypes.func.isRequired,\r\n  onRemove: PropTypes.func.isRequired\r\n};\r\nexport default TodoItem;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nfunction TodoList(props) {\r\n  return (\r\n    <ul className=\"resetList\">\r\n      {props.todos.map((todo, index) => (\r\n        <TodoItem key={todo.id} todo={todo} index={index} onChange={props.onToggle} onRemove={props.onRemove}/>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nTodoList.propTypes = {\r\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired, \r\n  onToggle: PropTypes.func.isRequired,\r\n  onRemove: PropTypes.func.isRequired\r\n};\r\nexport default TodoList;\r\n","import React from \"react\";\r\n\r\nfunction Preloader(props) {\r\n  return (\r\n     <div className=\"preloader\">\r\n    <div className=\"lds-roller\">\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Preloader;\r\n","import React from \"react\";\r\nimport \"./Modal.css\";\r\n\r\nexport default class Modal extends React.Component {\r\n  state = {\r\n    isOpen: false,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <button className=\"openModalBtn\"\r\n          onClick={() => {\r\n            this.setState({ isOpen: true });\r\n          }}\r\n        >\r\n          Open modal\r\n        </button>\r\n        {this.state.isOpen && (\r\n          <div className=\"modal\">\r\n            <div className=\"modalBody\">\r\n              <p>This is modal window!</p>\r\n              <button\r\n                onClick={() => {\r\n                  this.setState({ isOpen: false });\r\n                }}\r\n              >\r\n                Close modal\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport InputAddTodo from \"./components/InputAddTodo\";\nimport TodoList from \"./components/TodoList\";\nimport Preloader from \"./Loader\";\nimport Modal from \"./Modal/Modal\";\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/todos?_limit=5\")\n      .then((response) => response.json())\n      .then((todos) => {\n        setTodos(todos);\n        setLoading(false);\n      });\n  }, []);\n\n  function toggleTodo(id) {\n    setTodos(\n      todos.map((todo) => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      })\n    );\n  }\n\n  function removeTodo(id) {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  }\n\n  function addTodo(text) {\n    const oldId = todos[todos.length - 1].id;\n    setTodos([...todos, { id: oldId + 1, completed: false, title: text }]);\n  }\n\n  return (\n    <div className=\"wrapper\">\n      <h1>React tutorial</h1>\n      <Modal />\n      <InputAddTodo onCreate={addTodo} />\n      {loading && <Preloader />}\n      {todos.length > 0 ? (\n        <TodoList todos={todos} onToggle={toggleTodo} onRemove={removeTodo} />\n      ) : loading ? null : (\n        <div>No todos!</div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}